@model WeddingShare.Models.PhotoGallery

@using WeddingShare.Constants
@using WeddingShare.Enums
@using WeddingShare.Views.Gallery.Modes

@{
    var columnCount = await _settings.GetOrDefault(Settings.Gallery.Columns, 4, Model?.GalleryName);
    var identityEnabled = await _settings.GetOrDefault(Settings.IdentityCheck.Enabled, true);

    try
    {
        if (ViewBag.IsMobile ?? false)
        {
            columnCount = 1;
        }
        else
        {
            while (12 % columnCount != 0)
            {
                columnCount--;
            }
        }
    }
    catch { }

    IEnumerable<IGrouping<string?, PhotoGalleryImage>>? imageGroups = null;
    if (Model?.Images != null && Model.Images.Any())
    {
        switch (Model?.GroupBy ?? GalleryGroup.Date)
        {
            case GalleryGroup.Date:
                imageGroups = Model?.Images?.GroupBy(x => (x.UploadDate != null ? x.UploadDate.Value.ToString("dddd, d MMMM yyyy") : "Unknown"));
                switch (Model?.OrderBy ?? GalleryOrder.Descending)
                {
                    case GalleryOrder.Ascending:
                        imageGroups = imageGroups?.OrderBy(x => x.FirstOrDefault()?.UploadDate ?? new DateTime());
                        break;
                    case GalleryOrder.Random:
                        imageGroups = imageGroups?.OrderBy(x => Guid.NewGuid());
                        break;
                    default:
                        imageGroups = imageGroups?.OrderByDescending(x => x.FirstOrDefault()?.UploadDate ?? new DateTime());
                        break;
                }
                break;
            case GalleryGroup.MediaType:
                imageGroups = Model?.Images?.GroupBy(x => x.MediaType.ToString());
                switch (Model?.OrderBy ?? GalleryOrder.Descending)
                {
                    case GalleryOrder.Ascending:
                        imageGroups = imageGroups?.OrderBy(x => x.Key);
                        break;
                    case GalleryOrder.Random:
                        imageGroups = imageGroups?.OrderBy(x => Guid.NewGuid());
                        break;
                    default:
                        imageGroups = imageGroups?.OrderByDescending(x => x.Key);
                        break;
                }
                break;
            case GalleryGroup.Uploader:
                imageGroups = Model?.Images?.GroupBy(x => x.UploadedBy ?? "Anonymous");
                switch (Model?.OrderBy ?? GalleryOrder.Descending)
                {
                    case GalleryOrder.Ascending:
                        imageGroups = imageGroups?.OrderBy(x => x.Key);
                        break;
                    case GalleryOrder.Random:
                        imageGroups = imageGroups?.OrderBy(x => Guid.NewGuid());
                        break;
                    default:
                        imageGroups = imageGroups?.OrderByDescending(x => x.Key);
                        break;
                }
                break;
            default:
                imageGroups = Model?.Images?.GroupBy(x => x.GalleryName ?? "Default");
                switch (Model?.OrderBy ?? GalleryOrder.Descending)
                {
                    case GalleryOrder.Ascending:
                        imageGroups = imageGroups?.OrderBy(x => x.Key);
                        break;
                    case GalleryOrder.Random:
                        imageGroups = imageGroups?.OrderBy(x => Guid.NewGuid());
                        break;
                    default:
                        imageGroups = imageGroups?.OrderByDescending(x => x.Key);
                        break;
                }
                break;
        }
    }
}

@if (imageGroups != null)
{
    foreach (var imageGroup in imageGroups)
    {
        if (Model?.GroupBy != GalleryGroup.None)
        {
            <h1 class="display-7">@imageGroup.Key
                <span class="header-actions">
                    <span class="action text-success pointer">
                        <i class="btnDownloadGroup fa-solid fa-download" data-gallery-id="@Model?.GalleryId" data-gallery-key="@(await _settings.GetOrDefault(Settings.Gallery.SecretKey, string.Empty, Model?.GalleryName))" data-group-name="@((int?)Model?.GroupBy)|@imageGroup.Key" alt="@_localizer["Download"].Value"></i>
                        <span>@_localizer["Download"].Value</span>
                    </span>
                </span>
            </h1>
        }

        var imageGroupImages = Model?.OrderBy == GalleryOrder.Random ? imageGroup.OrderBy(x => Guid.NewGuid()).ToList() : imageGroup.ToList();
        for (var columnIndex = 0; columnIndex < columnCount; columnIndex++)
        {
            <div class="@(ViewBag.IsMobile ? "col-12" : $"col-lg-{12 / columnCount} col-md-6 col-sm-12 mb-4 mb-lg-0")">
                @if (imageGroupImages != null)
                {
                    var index = columnIndex;
                    while (index < imageGroupImages.Count())
                    {
                        var image = imageGroupImages.ElementAt(index);

                        <div class="image-tile mb-4">
                            <a href="@image.ImagePath" class="media-viewer-item" data-media-viewer-type="@image?.MediaType.ToString().ToLower()" data-media-viewer-collection="@image.GalleryName" data-media-viewer-author="@(identityEnabled ? $"{_localizer["Uploaded_By"].Value}: {(!string.IsNullOrWhiteSpace(image?.UploadedBy) ? image?.UploadedBy : "Anonymous")}" : string.Empty)" data-media-viewer-download="@((await _settings.GetOrDefault(Settings.Gallery.Download, true, Model?.GalleryName) || (User?.Identity != null && User.Identity.IsAuthenticated)).ToString().ToLower())">
                                <img src="@image?.ThumbnailPath" class="w-100 shadow-1-strong" loading="lazy" />
                                @if (image?.MediaType == MediaType.Video)
                                {
                                    <img src="/images/play-button.svg" class="media-viewer-play" loading="lazy" />
                                }
                            </a>
                            @if (User?.Identity != null && User.Identity.IsAuthenticated)
                            {
                                <button type="button" class="btn btn-danger btnDeletePhoto w-100" data-photo-id="@image?.Id" data-photo-name="@image?.Name">@_localizer["Delete"].Value</button>
                            }
                        </div>
                        index += columnCount;
                    }
                }
            </div>
        }

        @if (Model?.LoadScripts ?? true)
        {
            var idleTimeout = await _settings.GetOrDefault(Settings.Gallery.IdleRefreshMins, 0, Model?.GalleryName);
            if (idleTimeout > 0)
            {
                <script>
                    document.addEventListener('DOMContentLoaded', function () { 
                        $(function () { 
                            var idleTimeout;

                            onIdle();
                            $(document).on('mousemove keydown scroll click', onIdle);

                            function onIdle() {
                                clearTimeout(idleTimeout);
                                idleTimeout = setTimeout(function () {
                                    refreshGalleryPage(onIdle);
                                }, @TimeSpan.FromMinutes(idleTimeout).TotalMilliseconds);
                            }
                        });
                    }, false);
                </script>
            }
        }
    }
}